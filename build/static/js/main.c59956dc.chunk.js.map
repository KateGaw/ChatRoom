{"version":3,"sources":["components/ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["ChatWindow","messages","className","Object","keys","map","item","key","id","App","db","firebase","useState","setMessages","text","setText","useEffect","ref","on","elem","val","onSubmit","event","preventDefault","push","value","onChange","target","type","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAoBeA,EAbI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACE,yBAAKC,UAAU,iBACC,OAAbD,GACCE,OAAOC,KAAKH,GAAUI,KAAI,SAACC,GAAD,OACxB,yBAAKC,IAAKD,EAAME,GAAIF,EAAMJ,UAAU,gBACjCD,EAASK,SCwCPG,EAxCH,WACV,IAAMC,EAAKC,aADK,EAEgBC,mBAAS,MAFzB,mBAETX,EAFS,KAECY,EAFD,OAGQD,mBAAS,IAHjB,mBAGTE,EAHS,KAGHC,EAHG,KAQhBC,qBAAU,WACKN,EAAGO,IAAI,YACfC,GAAG,SAAS,SAACC,GAChBN,EAAYM,EAAKC,YAElB,CAACV,IAYJ,OACE,yBAAKR,UAAU,QACb,kBAAC,EAAD,CAAYD,SAAUA,IACtB,0BAAMoB,SATc,SAACC,GACvBA,EAAMC,iBACNR,EAAQ,IACRL,EAAGO,IAAI,YAAYO,KAAKV,IAMWZ,UAAU,mBACzC,8BACEuB,MAAOX,EACPZ,UAAU,gBACVwB,SAAU,SAACJ,GAAD,OAAWP,EAAQO,EAAMK,OAAOF,UAE5C,2BAAOG,KAAK,SAASH,MAAM,OAAOvB,UAAU,0BCnChC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANtB,gBAVqB,CACnBuB,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c59956dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Return messages list\r\n * @param {object=} messages Messages list from Firebase DB\r\n */\r\n\r\nconst ChatWindow = ({ messages }) => {\r\n  return (\r\n    <div className=\"chat-messages\">\r\n      {messages !== null &&\r\n        Object.keys(messages).map((item) => (\r\n          <div key={item} id={item} className=\"chat-message\">\r\n            {messages[item]}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport * as firebase from \"firebase\";\nimport ChatWindow from \"./components/ChatWindow\";\n\n/**\n * Main function, return chat window\n *\n * @param {object} db Firebase Database\n * @param {object=} messages all messages from db\n * @param {string} text text of the current message\n */\n\nconst App = () => {\n  const db = firebase.database();\n  const [messages, setMessages] = useState(null);\n  const [text, setText] = useState(\"\");\n\n  /**\n   * Set database data to messages variable\n   */\n  useEffect(() => {\n    const mess = db.ref(\"messages\");\n    mess.on(\"value\", (elem) => {\n      setMessages(elem.val());\n    });\n  }, [db]);\n\n  /**\n   * Calls when send button clicked\n   * Sends new message to db and clear textarea field\n   */\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    setText(\"\");\n    db.ref(\"messages\").push(text);\n  };\n\n  return (\n    <div className=\"chat\">\n      <ChatWindow messages={messages} />\n      <form onSubmit={onSubmitHandler} className=\"chat-input_form\">\n        <textarea\n          value={text}\n          className=\"chat-textarea\"\n          onChange={(event) => setText(event.target.value)}\n        />\n        <input type=\"submit\" value=\"Send\" className=\"chat-submit_button\" />\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from \"firebase\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAh9H4vAVYxkFob8tWfeWiOOMqZ1UMLZMQ\",\n  authDomain: \"chatroom-97c43.firebaseapp.com\",\n  databaseURL: \"https://chatroom-97c43.firebaseio.com\",\n  projectId: \"chatroom-97c43\",\n  storageBucket: \"chatroom-97c43.appspot.com\",\n  messagingSenderId: \"174907672317\",\n  appId: \"1:174907672317:web:548a943edd0ed3ac3ae094\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}